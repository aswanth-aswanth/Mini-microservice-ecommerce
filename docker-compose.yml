version: '3.8'

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.6-management-alpine
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - my_network

  api-gateway:
    build: 
      context: ./src/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
    depends_on:
      - auth-service
      - user-service
      - product-service
      - order-service
      - review-service
      - rabbitmq
    networks:
      - my_network

  auth-service:
    build: 
      context: ./src/services/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      - NODE_ENV=development
      - MONGO_URL=mongodb://mongo:27017/my-microservice
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - my_network

  user-service:
    build: 
      context: ./src/services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      - NODE_ENV=development
      - MONGO_URL=mongodb://mongo:27017/my-microservice
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - my_network

  product-service:
    build: 
      context: ./src/services/product-service
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      - NODE_ENV=development
      - MONGO_URL=mongodb://mongo:27017/my-microservice
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - my_network

  order-service:
    build: 
      context: ./src/services/order-service
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      - NODE_ENV=development
      - MONGO_URL=mongodb://mongo:27017/my-microservice
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - my_network

  review-service:
    build: 
      context: ./src/services/review-service
      dockerfile: Dockerfile
    container_name: review-service
    environment:
      - NODE_ENV=development
      - MONGO_URL=mongodb://mongo:27017/my-microservice
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - my_network

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - my_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo --quiet
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  my_network:
    driver: bridge

volumes:
  mongo_data:
